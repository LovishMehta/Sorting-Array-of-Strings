1. Double Pointer (Pointer to Pointer) in C
(link:https://www.geeksforgeeks.org/double-pointer-pointer-pointer-c/)
link: https://beginnersbook.com/2014/01/c-pointer-to-pointer/

Good explanation Link: https://drive.google.com/drive/u/0/folders/10FNtAfaO0MgEqvTpFyo5b0fW6K8C1Pek

    Declaring Pointer to Pointer is similar to declaring pointer in C. The difference is we have to place an additional ‘*’ before 
    the name of pointer.
    Syntax:   int **ptr;    // declaring double pointer

#####################################################################################################################################

2. Dynamic Memory Allocation in C using malloc(), calloc(), free() and realloc()
(link: https://www.geeksforgeeks.org/dynamic-memory-allocation-in-c-using-malloc-calloc-free-and-realloc/)
    “malloc” or “memory allocation” method is used to dynamically allocate a single large block of memory with the specified size.
     It returns a pointer of type void which can be cast into a pointer of any form.

       Syntax: ptr = (cast-type*) malloc(byte-size)

       For Example:
       ptr = (int*) malloc(100 * sizeof(int));

       Since the size of int is 4 bytes,this statement will allocate 400 bytes of memory. 
       And, the pointer ptr holds the address of the first byte in the allocated memory.
 
 ####################################################################################################################################
 
3. Multidimensional Arrays in C / C++
(link: https://www.geeksforgeeks.org/multidimensional-arrays-c-cpp/)
     Array- Basics
     In C/C++, we can define multidimensional arrays in simple words as array of arrays. 
     Data in multidimensional arrays are stored in tabular form (in row major order).
     
syntax: data_type  array_name[size1][size2]....[sizeN];

        data_type: Type of data to be stored in the array. Here data_type is valid C/C++ data type
        array_name: Name of the array
        
Examples: Two dimensional array:
          int two_d[10][20];

###################################################################################################################################

4. Link between "2D Array" and "Double pointer".
refer link: https://www.techiedelight.com/pass-2d-array-function-parameter/
      

Good explanation Link: https://drive.google.com/drive/u/0/folders/10FNtAfaO0MgEqvTpFyo5b0fW6K8C1Pek

suppose you have a function 
                    int fun(int m, int n, int **arr)
               so in the above function Double pointer => **arr ,is the pointer to the first element of the 2D ARRAY. To assign values
               or access the 2D array one method is using arr[i][j]. => i = row element, and j = columns
         arr[0,0] => 1st element of the 2D array. In similar manner j=0   arr[0,0], arr[0,1], arr[0,2]
                                                                    j=1   arr[1,0], arr[1,1], arr[1,2]
                                                                    so on.....
 
 ####################################################################################################################################
               
5. Function Pointer
(refer link : https://www.geeksforgeeks.org/function-pointer-in-c/)
Also refer link: https://www.cprogramming.com/tutorial/function-pointers.html
 
*In C, like normal data pointers (int *, char *, etc), we can have pointers to functions. 

*Like normal pointers, a function pointer can be passed as an argument and can also be returned from a function.
 For example, consider the following C program where wrapper() receives a void fun() as parameter and calls the passed function.

*EXAMPLE
// A simple C program to show function pointers as parameter 
#include <stdio.h> 
  
// Two simple functions 
void fun1() { printf("Fun1\n"); } 
void fun2() { printf("Fun2\n"); } 
  
// A function that receives a simple function 
// as parameter and calls the function 
void wrapper(void (*fun)()) 
{ 
    fun(); 
} 
  
int main() 
{ 
    wrapper(fun1);  // pass the name of the function "fun1" as it is in wrapper function => "wrapper(fun1)"
    wrapper(fun2); 
    return 0; 
}

#######################################################################################################################################

6. Difference Between "*(int*)a" and "*a"
      we have two cases 
CASE I: when we have function => void fun(const void *p)  // pointer is of void type
                                In the above function we can pass address of => int val, char val, float val (variable of any data type)
                                i.e. irrespective of Data Type because the pointer is of void type.
                                
                                Now to 'acces the element' or 'we can say to get the value' pointed by pointer p ,we will have to 
                                specify the type of data it is pointing to.
                                
                                Example
                                #include<stdio.h>
                                #include<conio.h>
                                
                                void fun(const void *p)
                                {
                                 int x = *(int*)p  // so here (int*) means integer pointer => pointer points to an integer 
                                                   // After that *(int*) means => derefrencing the ponter to the integer, i.e. 
                                                  // getting the value pointed by pointer.(Normally we use *p only if data type is known)
                                   printf("%d",x)
                                }  
                                int main()
                                {
                                 int val = 10;
                                 fun(&val);
                                 return 0;
                                } 
                                
CASE II: when we have function => void fun( int *p) // pointer is of int type
                                 In the above function we can pass the address of  => int val (variiable of integer type only) 
                                 because the pointer is already defined as "int", i.e. it will accept the address of only integers.
                                 
                                 Now in this case to "access the value pointed by pointer", we dont need to specify the data type
                                 of pointer as it's already known. So we can directly write the pointer as "*p" to access the elements.
                                 
                                 Example
                                 #include<conio.h>
                                 #include<stdio.h>
                                 
                                 void fun(int *p)
                                 {
                                  int x = *p;
                                  printf("%d",x);
                                 } 
                                 
                                 int main()
                                 {
                                  int val = 10;
                                  fun(&val);
                                  return 0;
                                 } 
                              
 #######################################################################################################################################                                
                                 
  7. Methadology used in Solving "Sorting Array of Strings"
  
      1. Firstly comparing 1st element  of the strings with each other 
      then further 3 cases are present in checking elements

      Case I: if(element 1 of String 1 > element 1 of string 2)
                { 
                    return 1;
                    Now returning 1 means swap the strings
                }
     Case II: if(elment 1 of string 1 == element 2 of string 2)
                {
                    In this case compare the next elements of the string
                    if(element 2 of string 1 > element 2 of string 2)
                      {
                          if element 2 of string 1 is greater than swap, i.e.
                          return 1
                          {return 1;}
                      }
                    if(element 2 of string 1 == string 2 of string 2)
                    { 
                        if even the 2nd element of the strings are equal than
                        compare the next elements(i.e 3rd, so on............) 
                        until you don't find the result.(i.e. greater,equal,smaller)

                        So for this i have used a loop
                        int i=0;
                        while(*(a+i)==*(b+i))
                        {i++;}
                        if(*(a+i)>*(b+i))
                        {
                            return 1; // i.e. swap the strings
                        }
                    }  
                }           
    Case III: Else case when neither the (element 1 of string 1 > element 1 of string2)
                        nor the (element 1 of string 1 ==  element of string 2)
                        {
                            return -1;
                        }

   2. Secondaly using bubble sort in the string_sort function. Comparing each string 
      with other string.
   3. Swapping the number in the string_sort() function.                        
  
  #####################################################################################################################################                               
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                
